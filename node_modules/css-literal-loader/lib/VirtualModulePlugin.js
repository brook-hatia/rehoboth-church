"use strict";

exports.__esModule = true;
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _memoryFs = _interopRequireDefault(require("memory-fs"));

var _proxyFileSystem = _interopRequireDefault(require("./proxyFileSystem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PLUGIN = 'css-literal-loader';

class VirtualModulePlugin {
  /**
   * Apply an instance of the plugin to compilation.
   * helpful for adding the plugin inside a loader.
   */
  static bootstrap(compilation, files) {
    const {
      compiler
    } = compilation;
    const plugin = new VirtualModulePlugin(files);
    plugin.augmentCompilerFileSystem(compiler);
    compilation.inputFileSystem = compiler.inputFileSystem; // v3

    if (!compiler.resolverFactory) return plugin; // this is suuuch a hack

    if (compiler.resolverFactory.cache1) compiler.resolverFactory.cache1 = new WeakMap();
    if (compiler.resolverFactory.cache1) compiler.resolverFactory.cache2.clear();
    return plugin;
  }

  constructor(files) {
    this.addFile = (virtualPath, content) => {
      this.fs.mkdirpSync(_path.default.dirname(virtualPath));
      this.fs.writeFileSync(virtualPath, content);
    };

    this.fs = new _memoryFs.default();

    if (files) {
      Object.keys(files).forEach(key => {
        this.addFile(key, files[key]);
      });
    }
  }

  augmentCompilerFileSystem(compiler) {
    if (this.augmented === true) {
      return;
    }

    const fs = (0, _proxyFileSystem.default)(compiler.inputFileSystem, this.fs);
    compiler.inputFileSystem = fs;

    if (!compiler.hooks) {
      compiler.resolvers.normal.fileSystem = fs;
      compiler.resolvers.context.fileSystem = fs;
      compiler.resolvers.loader.fileSystem = fs;
    }

    this.augmented = true;
  }

  apply(compiler) {
    const augmentOnCompile = () => {
      this.augmentCompilerFileSystem(compiler);
    };

    const augmentLoaderCOntext = loaderContext => {
      loaderContext.emitVirtualFile = this.addFile;
    }; // if the fs is already present then immediately augment it


    if (compiler.inputFileSystem) this.augmentCompilerFileSystem(compiler);

    if (compiler.hooks) {
      compiler.hooks.compile.tap(PLUGIN, augmentOnCompile);
      compiler.hooks.compilation.tap(PLUGIN, compilation => {
        compilation.hooks.normalModuleLoader.tap(PLUGIN, augmentLoaderCOntext);
      });
    } else {
      compiler.plugin('compile', augmentOnCompile);
      compiler.plugin('compilation', compilation => {
        compilation.plugin('normal-module-loader', augmentLoaderCOntext);
      });
    }
  }

}

var _default = VirtualModulePlugin;
exports.default = _default;